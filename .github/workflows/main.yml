name: CI

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      HOSTNAME: localhost
      POSTGRES_DB: test_db
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: 5434
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Upgrade python-pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: pip install tox
  coverage:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Upgrade python-pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: pip install tox
      - name: Run tests and Show test summary
        run: make tests
        env:
          API_USER_NAME: ${{ secrets.API_NEW_USER_NAME }}
          API_USER_PASSWORD: ${{ secrets.API_NEW_USER_PASSWORD }}
          SHOW_COV_HTML: False
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./api/tests/test-logs/coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./api/tests/test-logs/codecov_report.txt
          verbose: true
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./api/tests/test-logs/coverage.xml
      - name: Clean test artifacts
        run: make clean-tests
  build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      HOST: 0.0.0.0
      API_PORT: 8050
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Upgrade python-pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: pip install tox
      - name: Run containerized API with verification
        run: make start-containers-verify
      - name: Stop containers
        run: make stop-containers
        env:
          API_NEW_USER_NAME: ${{ secrets.API_NEW_USER_NAME }}
          API_NEW_USER_PASSWORD: ${{ secrets.API_NEW_USER_PASSWORD }}
